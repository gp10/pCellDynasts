quit()
version
install.packages("ggplot2")
install.packages("pheatmap")
pwd
gcd
library(pheatmap)
react = read.csv("/Users/gp10/Documents/Workstation_160623/Documents/MS/Heatmap_AA/heatmap_react_sig_val_forR.csv",header = T,sep=",")
rows = react[,1]
react = react[,-1]
rownames(react) = rows
react[react < -5]=-5
react[react > 5]=5
br = c(seq(-5,-0.5,0.5),seq(0.5,5,0.5))
pdf(file='/Users/gp10/Documents/Workstation_160623/Documents/MS/Heatmap_AA/heatmap_react_sig_val.pdf',width=8, height=7);
pheatmap(react,breaks = br,
color=colorRampPalette(c("red","white","green"))(19),
sepcolor="#FF0000",sepwidth=c(0.5,0.5),
scale = "none",trace="none",margins = c(5,15),key = T,
main = "Catalytic effect of amino acids",
cluster_rows = T, cluster_cols =T,border_color = "grey",
fontsize_row = 6)
dev.off()
react = read.csv("/Users/gp10/Documents/Workstation_160623/Documents/MS/Heatmap_AA/heatmap_react_sig_val_forR.csv",header = T,sep=",")
rows = react[,1]
react = react[,-1]
rownames(react) = rows
react[react < -5]=-5
react[react > 5]=5
br = c(seq(-5,-0.5,0.5),seq(0.5,5,0.5))
pdf(file='/Users/gp10/Documents/Workstation_160623/Documents/MS/Heatmap_AA/heatmap_react_sig_val.pdf',width=8, height=7);
pheatmap(react,breaks = br,
color=colorRampPalette(c("red","white","green"))(19),
sepcolor="#FF0000",sepwidth=c(0.5,0.5),
scale = "none",trace="none",margins = c(5,15),key = T,
main = "Catalytic effect of amino acids",
cluster_rows = T, cluster_cols =T,border_color = "grey",
fontsize_row = 6)
dev.off()
react = read.csv("/Users/gp10/Documents/Workstation_160623/Documents/MS/Heatmap_AA/heatmap_react_sig_val_forR.csv",header = T,sep=",")
rows = react[,1]
react = react[,-1]
rownames(react) = rows
react[react < -5]=-5
react[react > 5]=5
br = c(seq(-5,-0.5,0.5),seq(0.5,5,0.5))
pdf(file='/Users/gp10/Documents/Workstation_160623/Documents/MS/Heatmap_AA/heatmap_react_sig_val.pdf',width=8, height=7);
pheatmap(react,breaks = br,
color=colorRampPalette(c("red","white","green"))(19),
sepcolor="#FF0000",sepwidth=c(0.5,0.5),
scale = "none",trace="none",margins = c(5,15),key = T,
main = "Catalytic effect of amino acids",
cluster_rows = T, cluster_cols =T,border_color = "grey",
fontsize_row = 6)
dev.off()
quit()
qchisq()
qchisq(0.05)
?qchisq()
qchisq(1, 1, ncp = 0, lower.tail = TRUE, log.p = FALSE)
qchisq(0.05, 1, ncp = 0, lower.tail = TRUE, log.p = FALSE)
dchisq(0.05, 1, ncp = 0, log = FALSE)
dchisq(0.1, 1, ncp = 0, log = FALSE)
dchisq(0.95, 1, ncp = 0, log = FALSE)
dchisq(95, 1, ncp = 0, log = FALSE)
dchisq(5, 1, ncp = 0, log = FALSE)
3.84/2
dchisq(0.05, 0, ncp = 0, log = FALSE)
dchisq(0.05, 1, ncp = 0, log = FALSE)
1.74*2
require(graphics)
dchisq(1, df = 1:3)
pchisq(1, df =  3)
pchisq(1, df =  3, ncp = 0:4)  # includes the above
x <- 1:10
## Chi-squared(df = 2) is a special exponential distribution
all.equal(dchisq(x, df = 2), dexp(x, 1/2))
all.equal(pchisq(x, df = 2), pexp(x, 1/2))
## non-central RNG -- df = 0 with ncp > 0:  Z0 has point mass at 0!
Z0 <- rchisq(100, df = 0, ncp = 2.)
graphics::stem(Z0)
## visual testing
## do P-P plots for 1000 points at various degrees of freedom
L <- 1.2; n <- 1000; pp <- ppoints(n)
op <- par(mfrow = c(3,3), mar = c(3,3,1,1)+.1, mgp = c(1.5,.6,0),
oma = c(0,0,3,0))
for(df in 2^(4*rnorm(9))) {
plot(pp, sort(pchisq(rr <- rchisq(n, df = df, ncp = L), df = df, ncp = L)),
ylab = "pchisq(rchisq(.),.)", pch = ".")
mtext(paste("df = ", formatC(df, digits = 4)), line =  -2, adj = 0.05)
abline(0, 1, col = 2)
}
mtext(expression("P-P plots : Noncentral  "*
chi^2 *"(n=1000, df=X, ncp= 1.2)"),
cex = 1.5, font = 2, outer = TRUE)
par(op)
## "analytical" test
lam <- seq(0, 100, by = .25)
p00 <- pchisq(0,      df = 0, ncp = lam)
p.0 <- pchisq(1e-300, df = 0, ncp = lam)
stopifnot(all.equal(p00, exp(-lam/2)),
all.equal(p.0, exp(-lam/2)))
pchisq(0.05, 1, ncp = 0, lower.tail = TRUE, log.p = FALSE)
pchisq(0.95, 1, ncp = 0, lower.tail = TRUE, log.p = FALSE)
dchisq(0.05, 1, ncp = 0, log = FALSE)
qchisq(0.05, 1, ncp = 0, lower.tail = TRUE, log.p = FALSE)
qchisq(0.1, 1, ncp = 0, lower.tail = TRUE, log.p = FALSE)
qchisq(0.1, 1, ncp = 0, lower.tail = FALSE, log.p = FALSE)
qchisq(0.05, 1, ncp = 0, lower.tail = FALSE, log.p = FALSE)
qchisq(0.05, 1:, ncp = 0, lower.tail = FALSE, log.p = FALSE)
qchisq(0.05, 1, ncp = 0, lower.tail = FALSE, log.p = FALSE)
df = 1:8
df
p = 0.05
qchisq(p, df, ncp = 0, lower.tail = FALSE, log.p = FALSE)
# qchisq gives the quantile function of a probability "p" from a (non-central) Chi-Squared Distribution with "df" degrees of freedom.
p = 0.05
df = 1:8
LRT_threshold = qchisq(p, df, ncp = 0, lower.tail = FALSE, log.p = FALSE)
LRT_threshold
plot(LRT_threshold)
# qchisq gives the quantile function of a probability "p" from a (non-central) Chi-Squared Distribution with "df" degrees of freedom.
p = 0.05
df = 1:8
LRT_threshold = qchisq(p, df, ncp = 0, lower.tail = FALSE, log.p = FALSE)
LRT_threshold
plot(LRT_threshold)
# qchisq gives the quantile function of a probability "p" from a (non-central) Chi-Squared Distribution with "df" degrees of freedom.
p = 0.05
df = 1:8
LRT_threshold = qchisq(p, df, ncp = 0, lower.tail = FALSE, log.p = FALSE)
LRT_threshold
plot(LRT_threshold)
# qchisq gives the quantile function of a probability "p" from a (non-central) Chi-Squared Distribution with "df" degrees of freedom.
p = 0.05
df = 1:8
LRT_threshold = qchisq(p, df, ncp = 0, lower.tail = FALSE, log.p = FALSE)
LRT_threshold
plot(LRT_threshold)
quit()
#library(ggplot2)
require(vioplot)
require(devtools)
require(digest)
source_gist("https://gist.github.com/mbjoseph/5852613")
plot(x=NULL, y=NULL,
xlim = c(0.5, 2.5), ylim=c(min(values), max(values)),
type="n", ann=FALSE, axes=F)
axis(1, at=c(1, 2),  labels=c("A", "B"))
axis(2)
for (i in unique(treatment)) {
for (j in unique(group)){
vioplot2(values[which(treatment == i & group == j)],
at = ifelse(i == "A", 1, 2),
side = ifelse(j == 1, "left", "right"),
col = ifelse(j == 1, "purple", "lightblue"),
add = T)
}
}
title("Violin plot", xlab="Treatment")
legend("bottomright", fill = c("purple", "lightblue"),
legend = c("Group 1", "Group 2"), box.lty=0)
x <- 10
myNumber <- 25
x + myNumber
myNumber <- myNumber + sqrt(16)
myNumber
?seq
seq(1,9)
seq(3,9)
?rnorm
??nrnorm
??rnorm
x <- c(3,4,5,6)
x
x[2]
x[-1]
x <- seq(2, 20, length.out=5)
x
y <- rep(3, 5)
y
x <- 3:12
x[3:7]
x[seq(2, 6, 2)]
x[rep(3, 2)]
y <- c(x, 1)
y
x
z <- c(x, y)
z
x <- 3:12
x[-3]
x[-(5:7)]
x[3:5] <- 1
x
z <- x^2
z
y + z
y
z
x <- 1:10
y <- x*2
z <- x^2
y
z
y+z
x + 1:2
x
gene.names <- c("Pax6", "Beta-actin", "FoxP2", "Hox9")
gene.names
gene.names[1]
gene.expression <- c(0, 3.2, 1.2, -2)
names(gene.expression) <- gene.names
gene.expression
names(x) <- gene.names
x
?seq
seq(0, 1, length.out = 11)
??mean
?seq
?sd
install.packages(name.of.my.package)
age    <- c(50, 21, 35, 45, 28, 31, 42, 33, 57, 62)
weight <- c(70.8, 67.9, 75.3, 61.9, 72.4, 69.9,
63.5, 71.5, 73.2, 64.8)
firstName  <- c("Adam", "Eve", "John", "Mary",
"Peter", "Paul", "Joanna", "Matthew",
"David", "Sally")
secondName <- c("Jones", "Parker", "Evans", "Davis",
"Baker","Daniels", "Edwards", "Smith",
"Roberts", "Wilson")
c(20, "a string", TRUE)
amig <- c(20, "a string", TRUE)
amig[1]+2
class(y)
class(firstName)
class(age)
class(weight)
class(consent)
consent <- c(TRUE, TRUE, FALSE, TRUE, FALSE,
FALSE, FALSE, TRUE, FALSE, TRUE)
class(consent)
sex <- c("Male", "Female", "Male", "Female", "Male",
"Male", "Female", "Male", "Male", "Female")
sex
factor(sex)
sex
patients <- data.frame(firstName, secondName,
paste(firstName, secondName),
sex, age, weight, consent)
patients
patients
patients$age
names(patients) <- c("First_Name", "Second_Name",
"Full_Name", "Sex", "Age",
"Weight", "Consent")
names(patients)
patients <- data.frame(First_Name = firstName,
Second_Name = secondName,
Full_Name = paste(firstName,
secondName),
Sex = sex,
Age = age,
Weight = weight,
Consent = consent)
names(patients)
patients$First_Name
patients <- data.frame(First_Name = firstName,
Second_Name = secondName,
Full_Name = paste(firstName,
secondName),
Sex = factor(sex),
Age = age,
Weight = weight,
Consent = consent,
stringsAsFactors = FALSE)
patients
patients$Sex
patients$First_Name
29+3
29+3
30+4
22/2
22/2
22/2
10*2
10*2
Untitled
mivar <- 5
mivar+2
mivar2 <- 3
mivar + mivar2
mivar2 <- mivar
min(5:1, pi) #-> one number
29+3
29+3
myvar <- 5
myvar = 5
myvar
myvar2 <- "Andrea"
myvar2
myvar2 <- Andrea
myvar2 <- "5"
myvar2 + 2
max(3,4,5)
max(3,4,5, 6, 10, 1000)
max(3,4,5, 6, 10, 1000, 2, 4)
myMAX <- max(3,4,5, 6, 10, 1000, 2, 4)
myMAX
myMAX <- max(3,4,5, 6, 10, 1000, 2, 4)
ingresos <- c(100,100,100,100)
ingresos
ingresos <- c(100,200,300,500)
ingresos
100*1.12
ingresos*1.12
tmp <- read.csv("patient-info.txt")
c(3, 4, 5)
nombres <- c("Andrea", "Julia", "Papito")
nombres
myv <- seq(1,100)
myv
myv <- 1:20
myv
nombres[2]
ingresos <- rep(1200,12)
ingresos
meses <- c("Enero","F","M","A","M","J","Julio","Ago","S","O","N","D")
names(ingresos) <- meses
ingresos
ingresos[4]
ingresos["Ago"]
patients
patients$First_Name
givenName <- patients$First_Name
givenName
givenName[4]
myvar <- 5
myvar
---
title: "Introduction to Solving Biological Problems Using R - Day 1"
author: Mark Dunning, Suraj Menon and Aiora Zabala. Original material by Robert Stojnić,
Laurent Gatto, Rob Foy, John Davey, Dávid Molnár and Ian Roberts
date: '`r format(Sys.time(), "Last modified: %d %b %Y")`'
output:
html_notebook:
toc: yes
toc_float: yes
---
age    <- c(50, 21, 35, 45, 28, 31, 42, 33, 57, 62)
age    <- c(50, 21, 35, 45, 28, 31, 42, 33, 57, 62)
weight <- c(70.8, 67.9, 75.3, 61.9, 72.4, 69.9,
63.5, 71.5, 73.2, 64.8)
firstName  <- c("Adam", "Eve", "John", "Mary",
"Peter", "Paul", "Joanna", "Matthew",
"David", "Sally")
secondName <- c("Jones", "Parker", "Evans", "Davis",
"Baker","Daniels", "Edwards", "Smith",
"Roberts", "Wilson")
consent <- c(TRUE, TRUE, FALSE, TRUE, FALSE,
FALSE, FALSE, TRUE, FALSE, TRUE)
c(20, "a string", TRUE)
firstName
;lkajsdfpoweijfds;lvwnefweoivnpweorkn-092lknvsdpoi
4
"Hola"
"Hola" + 4
quit()
p = 0.05
df = 1:8
LRT_threshold = qchisq(p, df, ncp = 0, lower.tail = FALSE, log.p = FALSE)
LRT_threshold
plot(LRT_threshold)
7.814728/2
setwd("~/Documents/H2BGFPdil_quantification/Unimodality_tests/EpitheliaPopulationSearch-master")
analyseSyntheticDataSet
getwd()
source('analyseSyntheticDataSet.R')
source('modetest.rsx')
source('analyseSyntheticDataSet.R')
remove(list = ls())
source('analyseSyntheticDataSet.R')
source('modetest.rsx')
source('analyseSyntheticDataSet.R')
remove(list = ls())
source('modetest.rsx')
source('analyseSyntheticDataSet.R')
remove(list = ls())
source('modetest.rsx')
source('analyseSyntheticDataSet.R')
remove(list = ls())
source('modetest.rsx')
source('analyseSyntheticDataSet.R')
?sys.source
commandArg?
??
lkjp
?commandArgs
hola = "myname"
hola = c(hola,"err")
hola
.libPaths()
quit()
